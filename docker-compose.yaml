##
## -------------------------
## | H T P C - D O C K E R |
## -------------------------
##
## Container based media tools configuration
##
## -- DO NOT EDIT THIS FILE --
##
## Configuration items for this file are taken from the .env file
##
## Have docker-compose.yml and .env in the same directory to launch the stack

version: '2'

######################
# SERVICES TO LAUNCH #
######################

services:
    # ----------------------------------------
    # PLEX
    # Robust Media Server
    # ----------------------------------------
    plex:
        container_name: plex
        image: plexinc/pms-docker
        restart: unless-stopped
        network_mode: 'host'
        ports:
            - '${IP_ADDRESS}:32400:32400/tcp'
            - '${IP_ADDRESS}:3005:3005/tcp'
            - '${IP_ADDRESS}:8324:8324/tcp'
            - '${IP_ADDRESS}:32469:32469/tcp'
            - '${IP_ADDRESS}:1900:1900/udp'
            - '${IP_ADDRESS}:32410:32410/udp'
            - '${IP_ADDRESS}:32412:32412/udp'
            - '${IP_ADDRESS}:32413:32413/udp'
            - '${IP_ADDRESS}:32414:32414/udp'
        environment:
            - PLEX_CLAIM=${PMSTOKEN}
            - ADVERTISE_IP=http://${IP_ADDRESS}:32400/
            - ALLOWED_NETWORKS=${CIDR_ADDRESS}
            - PLEX_UID=${PUID}
            - PLEX_GID=${PGID}
        hostname: ${HOSTNAME}
        volumes:
            - './plex:/config'
            - './plex/transcode:/transcode'
            - '/data/video/Movies:/data/movies'
            - '/data/video/TV:/data/tv'
            - '/data/music/:/data/music'
            - '/etc/localtime:/etc/localtime:ro'


    # ----------------------------------------
    # SONARR
    # TV Series Management
    # ----------------------------------------
    sonarr:
        image: linuxserver/sonarr
        container_name: sonarr
        restart: unless-stopped
        network_mode: 'bridge'
        ports:
            - '${IP_ADDRESS}:8989:8989'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - VIRTUAL_HOST=sonarr.${DOMAIN}
            - LETSENCRYPT_HOST=sonarr.${DOMAIN}
            - LETSENCRYPT_EMAIL=${EMAIL}
        volumes:
            - './sonarr:/config'
            - '/data/video/completed:/completed'
            - '/data/video/downloads:/downloads'
            - '/data/video/unprocessed:/unprocessed'
            - '/data/video/watch:/watch'
            - '/data/video/TV:/data/tv'
            - '/etc/localtime:/etc/localtime:ro'
    # ----------------------------------------
    # SONARR
    # TV Series Management
    # ----------------------------------------
    lidarr:
        image: linuxserver/lidarr
        container_name: lidarr
        restart: unless-stopped
        network_mode: 'bridge'
        ports:
            - '${IP_ADDRESS}:8686:8686'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - VIRTUAL_HOST=sonarr.${DOMAIN}
            - LETSENCRYPT_HOST=sonarr.${DOMAIN}
            - LETSENCRYPT_EMAIL=${EMAIL}
        volumes:
            - './lidarr:/config'
            - '/data/video/completed:/completed'
            - '/data/video/downloads:/downloads'
            - '/data/video/unprocessed:/unprocessed'
            - '/data/video/watch:/watch'
            - '/data/music:/music:rw'
            - '/etc/localtime:/etc/localtime:ro'

    # ----------------------------------------
    # RADARR
    # Movie Management
    # ----------------------------------------
    radarr:
        image: linuxserver/radarr
        container_name: radarr
        restart: unless-stopped
        network_mode: "bridge"
        ports:
            - '${IP_ADDRESS}:7878:7878'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - VIRTUAL_HOST=radarr.${DOMAIN}
            - LETSENCRYPT_HOST=radarr.${DOMAIN}
            - LETSENCRYPT_EMAIL=${EMAIL}
        volumes:
            - './radarr:/config'
            - '/data/video/completed:/completed'
            - '/data/video/downloads:/downloads'
            - '/data/video/unprocessed:/unprocessed'
            - '/data/video/Movies:/data/movies:rw'
            - '/etc/localtime:/etc/localtime:ro'

    pihole:
        image: pihole/pihole
        container_name: pihole
        restart: unless-stopped
        ports:
            - '${IP_ADDRESS}:53:53/tcp'
            - '${IP_ADDRESS}:53:53/udp'
            - '${IP_ADDRESS}:8090:80/tcp'
        environment:
            - ServerIP=${IP_ADDRESS}
            - PUID=${PUID}
            - PGID=${PGID}
            - WEBPASSWORD='admin'
            - DNS1="8.8.8.8"
            - DNS2="8.8.4.4"

        volumes:
            - './pihole:/etc/pihole/'
            - './pihole/dnsmasq:/etc/dnsmasq.d/'

    # ----------------------------------------
    # JACKETT
    # RSS/TORZNAB Feed Creator
    # ----------------------------------------
    jackett:
        image: linuxserver/jackett
        #build: https://github.com/linuxserver/docker-jackett.git
        container_name: jackett
        restart: unless-stopped
        network_mode: 'bridge'
        ports:
            - '${IP_ADDRESS}:9117:9117'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - VIRTUAL_HOST=jackett.${DOMAIN}
            - LETSENCRYPT_HOST=jackett.${DOMAIN}
            - LETSENCRYPT_EMAIL=${EMAIL}
        volumes:
            - './jackett:/config'
            - '/data/video/downloads:/downloads'
            - '/etc/localtime:/etc/localtime:ro'

    # ------------------------------------------
    # SABNZBD
    # 
    # ------------------------------------------
    sabnzbd:
        image: linuxserver/sabnzbd
        container_name: sabnzbd
        restart: unless-stopped
        network_mode: 'bridge'
        ports:
            - '${IP_ADDRESS}:9090:8080'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - VIRTUAL_HOST=sab.${DOMAIN}
        volumes:
            - './sabnzbd:/config'
            - '/data/video/downloads:/downloads'
            - '/data/video/TV:/data/tv:rw'
            - '/data/video/unprocessed:/unprocessed:rw'
            - '/data/video/completed:/completed:rw'
            - '/data/video/watch:/watch'
            - '/data/video/Movies:/data/movies:rw'
            - '/data/video/unprocessed:/incomplete-downloads'
            - '/etc/localtime:/etc/localtime:ro'

    hydra2:
        image: "linuxserver/hydra2"
        container_name: "hydra2"
        volumes:
            - ./hydra2:/config
            - '/data/video/downloads:/downloads'
            - '/media/bageera/basement/Torrents/Completed/docker/certs:/certs'
        ports:
            - "${IP_ADDRESS}:5076:5076"
        restart: always
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ} 


    deluge:
        image: "linuxserver/deluge"
        container_name: "deluge"
        network_mode: 'bridge'
        volumes:
            - ./docker/deluge:/config 
            - '/data/video/downloads:/downloads:rw'
            - '/data/video/TV:/data/tv:rw'
            - '/data/video/completed:/completed:rw'
            - '/data/video/watch:/watch:rw'
            - '/etc/localtime:/etc/localtime:ro'
        ports:
            - '${IP_ADDRESS}:8112:8112'
            - '${IP_ADDRESS}:8118:8118'
            - '${IP_ADDRESS}:58846:58846'
            - '${IP_ADDRESS}:58946:58946'
        restart: unless-stopped
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ} 
            - LAN_NETWORK=${CIDR_ADDRESS}

    headphones:
        image: "linuxserver/headphones"
        container_name: "headphones"
        network_mode: "bridge"
        volumes:
            - ./docker/headphones:/config
            - '/data/video/completed:/completed'
            - '/data/video/downloads:/downloads'
            - '/data/video/unprocessed:/unprocessed'
            - '/data/music:/music:rw'
        ports:
            - '${IP_ADDRESS}:8181:8181'
        restart: unless-stopped
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ} 
            - LAN_NETWORK=${CIDR_ADDRESS}





# ----------------------------------------------------
#
# Management Section
#
#
# ----------------------------------------------------

    # ----------------------------------------
    # PORTAINER
    # Docker Container Management
    # ----------------------------------------
    portainer:
        image: portainer/portainer:latest
        container_name: portainer
        restart: unless-stopped
        network_mode: 'bridge'
        ports:
            - '${IP_ADDRESS}:9000:9000'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - VIRTUAL_HOST=portainer.${DOMAIN}
            - LETSENCRYPT_HOST=portainer.${DOMAIN}
            - LETSENCRYPT_EMAIL=${EMAIL}
        volumes:
            - './portainer:/data'
            - '/var/run/docker.sock:/var/run/docker.sock'
            - '/etc/localtime:/etc/localtime:ro'
        command: --no-auth

    # ----------------------------------------
    # MUXIMUX
    # Web Frontend for HTPC Management
    # ----------------------------------------
    muximux:
        image: linuxserver/muximux
        container_name: muximux
        restart: unless-stopped
        network_mode: 'bridge'
        ports:
            - '${IP_ADDRESS}:8080:80'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - VIRTUAL_HOST=manage.${DOMAIN}
            - LETSENCRYPT_HOST=manage.${DOMAIN}
            - LETSENCRYPT_EMAIL=${EMAIL}
        volumes:
            - './muximux:/config'
            - '/etc/localtime:/etc/localtime:ro'
    # ----------------------------------------
    # WATCHTOWER
    # Automatic Update Service for Docker VMs
    # ----------------------------------------
    watchtower:
        image: v2tec/watchtower:latest
        container_name: watchtower
        restart: unless-stopped
        environment:
            - TZ=${TZ}
            - WATCHTOWER_NOTIFICATIONS=email
            - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${SMTP_FROM}
            - WATCHTOWER_NOTIFICATION_EMAIL_TO=${WATCHTOWER_EMAIL}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=${SMTP_SERVER}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=${SMTP_PORT}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${SMTP_USER}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${SMTP_PASS}
        network_mode: 'bridge'
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
            - '/etc/ssl/certs:/etc/ssl/certs'
        command: portainer --schedule @midnight --cleanup

    # ----------------------------------------
    # NETDATA
    # System Resource Monitoring Service
    # ----------------------------------------
    netdata:
        image: titpetric/netdata
        container_name: netdata
        restart: unless-stopped
        network_mode: 'bridge'
        ports:
            - '${IP_ADDRESS}:19999:19999'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - VIRTUAL_HOST=netdata.${DOMAIN}
            - LETSENCRYPT_HOST=netdata.${DOMAIN}
            - LETSENCRYPT_EMAIL=${EMAIL}
        cap_add:
            - SYS_PTRACE
        volumes:
            - '/proc:/host/proc:ro'
            - '/sys:/host/sys:ro'
            - '/etc/localtime:/etc/localtime:ro'
            - '/var/run/docker.sock:/var/run/docker.sock'


    # ----------------------------------------
    # NGINX-PROXY
    # Pretty Hostname Support for Services
    # ----------------------------------------
    nginx-proxy:
        image: jwilder/nginx-proxy:alpine
        container_name: nginx-proxy
        restart: unless-stopped
        network_mode: 'bridge'
        ports:
            - '80:80'
            - '443:443'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - './nginx-proxy/etc/nginx/vhost.d:/etc/nginx/vhost.d'
            - './nginx-proxy/usr/share/nginx/html:/usr/share/nginx/html'
            - './letsencrypt/certs:/etc/nginx/certs:ro'
            - '/etc/localtime:/etc/localtime:ro'
            - '/var/run/docker.sock:/tmp/docker.sock:ro'

    # ----------------------------------------
    # LETS ENCRYPT
    # SSL Support Companion for nginx-proxy
    # ----------------------------------------
    letsencrypt-nginx-proxy-companion:
        image: jrcs/letsencrypt-nginx-proxy-companion
        container_name: letsencrypt
        restart: unless-stopped
        network_mode: 'bridge'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - './letsencrypt/certs:/etc/nginx/certs:rw'
            - '/etc/localtime:/etc/localtime:ro'
            - '/var/run/docker.sock:/var/run/docker.sock:ro'
        volumes_from:
            - 'nginx-proxy'